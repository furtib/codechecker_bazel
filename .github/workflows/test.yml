name: codechecker-bazel-tests

# Triggers the workflow on push or pull request events.
on: [push, pull_request]

permissions: read-all

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rules_test:
    name: Analysis
    runs-on: ubuntu-24.04
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/env_setup

      - name: Print versions
        run: |
          bazel version
          CodeChecker version
          echo "[NOTE]: If you are debugging, its possible that " \
               "CodeChecker finds different analyzers when running in " \
               "bazel's sandbox environment!"
          CodeChecker analyzers

  # Prepares matrix used to generate jobs in project_test_runner
  prepare_project_matrix:
    runs-on: ubuntu-24.04
    outputs:
      project_configurations: ${{ steps.generate_matrix.outputs.matrix_json }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Generate dynamic project matrix
        id: generate_matrix
        run: |
          PATCH_DIR="./.github/workflows/patches/"
          find "$PATCH_DIR" -type f -name "*.sh" -print0 | while IFS= read -r -d $'\0' PATCH_SCRIPT_PATH; do
            # Extract project name from script path (e.g., "patch-yaml-cpp.sh" -> "yaml-cpp")
            PROJECT_NAME=$(basename "$PATCH_SCRIPT_PATH" | sed -E 's/^patch-(.*)\.sh$/\1/')

            jq -n \
              --arg name "$PROJECT_NAME" \
              --arg patch_script "$PATCH_SCRIPT_PATH" \
              '{
                name: $name,
                patch_script: $patch_script,
            }' >> "$TEMP_JSON_FILE" # Append to temp file

            echo "Added $PROJECT_NAME to matrix."
          done
          if [ -s "$TEMP_JSON_FILE" ]; then
            FINAL_MATRIX_JSON="[$(paste -s -d ',' "$TEMP_JSON_FILE")]"
          else
            FINAL_MATRIX_JSON="[]"
          fi

          echo "Generated matrix: $FINAL_MATRIX_JSON"
          echo "matrix_json=$FINAL_MATRIX_JSON" >> "$GITHUB_OUTPUT"
        shell: bash

  project_test_runner:
    # Test the bazel rules introduced by repository on an independent open-source projects.
    runs-on: ubuntu-24.04
    needs: prepare_project_matrix
    strategy:
      fail-fast: false
      max-parallel: 2 # limit number of concurrent jobs
      matrix:
        # Easily extensible project list
        project: ${{ fromJson(needs.prepare_project_matrix.outputs.project_configurations) }}
            
    name: "Test On Project: ${{ matrix.project.name }}" # Dynamic job name in UI
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/env_setup

      - name: Patching codechecker_bazel targets onto test_project
        run:  |
          sh ${{ matrix.project.patch_script }} ${{ github.repository }} ${{ github.ref }}

      # Running bazel with test will signal failure because CodeChecker found problems
      - name: Run Monolithic Bazel CodeChecker
        run: |
          cd test-proj
          bazel test :codechecker_test || [ $? -eq 3 ] && exit 0 || exit $?

      # Running bazel with test will signal failure because CodeChecker found problems
      - name: Run Per File Bazel CodeChecker
        run: |
          cd test-proj
          bazel test :code_checker_test || [ $? -eq 3 ] && exit 0 || exit $?
