name: codechecker-bazel-tests

# Triggers the workflow on push or pull request events.
on: [push, pull_request]

permissions: read-all

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  rules_test:
    name: Analysis
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/env_setup

      - name: Print versions
        run: |
          bazel version
          CodeChecker version
          echo "[NOTE]: If you are debugging, its possible that " \
               "CodeChecker finds different analyzers when running in " \
               "bazel's sandbox environment!"
          CodeChecker analyzers

  project_test_runner:
    # Test the bazel rules introduced by repository on an independent open-source projects.
    runs-on: ubuntu-24.04
    strategy:
      fail-fast: false
      max-parallel: 2 # limit number of concurrent jobs
      matrix:
        # Easily extensible project list
        project:
          - name: "yaml-cpp"
            patch_script: ".github/workflows/patches/patch-yaml-cpp.sh"
            
    name: "Test On Project: ${{ matrix.project.name }}" # Dynamic job name in UI
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup environment
        uses: ./.github/actions/env_setup

      - name: Patching codechecker_bazel targets onto test_project
        run:  |
          sh ${{ matrix.project.patch_script }} ${{ github.repository }} ${{ github.ref }}

      # Running bazel with test will signal failure because CodeChecker found problems
      - name: Run Monolithic Bazel CodeChecker
        run: |
          cd test-proj
          bazel test :codechecker_test || [ $? -eq 3 ] && exit 0 || exit $?

      # Running bazel with test will signal failure because CodeChecker found problems
      - name: Run Per File Bazel CodeChecker
        run: |
          cd test-proj
          bazel test :code_checker_test || [ $? -eq 3 ] && exit 0 || exit $?
